services:
  db:
    image: postgres:16
    restart: on-failure
    env_file:
      - .env
    volumes:
      - ../data/pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "5432"

  app:
    build: .
    tty: true
    expose:
      - "8000"
    command: sh -c "poetry run python manage.py collectstatic --noinput && poetry run python manage.py makemigrations && poetry run python manage.py migrate && poetry run python manage.py compilemessages && poetry run gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
      - static:/static/
      - media:/media/
      - ../cert/ca.crt/:/usr/local/share/ca-certificates/ca.crt
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  web:
    image: nginx
    restart: unless-stopped
    volumes:
      - ./nginx_conf/app.conf:/etc/nginx/conf.d/default.conf
#      - ../cert:/etc/nginx/ssl
#      - ../logs:/var/log/nginx
      - static:/var/www/html/helpdesk/static/
      - media:/var/www/html/helpdesk/media/
    depends_on:
      app:
        condition: service_started
    environment:
      TZ: "Europe/Moscow"
    ports:
      - "80:80"
      - "443:443"

  redis:
    build:
      context: ./dockerfiles/redis
      dockerfile: Dockerfile
    image: redis:7.4
    restart: always
    command: sh -c "./init.sh"
    ports:
      - "6379:6379"

  celery:
    build: .
    tty: true
    command: sh -c "poetry run celery -A config worker -l info"
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - app
    env_file:
      - .env

  celery-beat:
    build: .
    tty: true
    command: sh -c "poetry run celery -A config beat -l info"
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - app
    env_file:
      - .env

volumes:
  static:
  media:
